#! /usr/bin/python

# backup tool
# irfan

import sys
import os
import time
import getpass
import paramiko

# Globals
STRING_QUERY_MODE = False

def usage():
  """ print usage informaton """
  print("usage: host tag [-q query string] paths"

def main(argv):
  global STRING_QUERY_MODE
  if not argv:
    usage()
    return
  if len(argv) < 3:
    usage()
    return

  # check for query string param
  if len(argv) > 3:
    if argv[2] == "-p":
      STRING_QUERY_MODE = True

  begin_archive(argv)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_paths(arch_name, paths):

  print bcolors.OKGREEN + "using archive:" + bcolors.ENDC, arch_name,"..."
  print bcolors.OKGREEN + "using paths:" + bcolors.ENDC, ":".join(paths),"..."

  return paths


def begin_archive(argv):
  global STRING_QUERY_MODE
  arch_file_name = argv[0] + "_" + argv[1] + "_" + str(time.time()) + ".tar"
  q_str = ""

  if STRING_QUERY_MODE:
    paths = get_paths(arch_file_name, argv[4:])
    q_str = argv[3]
    print("query_string: " + q_str
  else:
    paths = get_paths(arch_file_name, argv[2:])
    q_str = ""

    
  do_archive(argv[0],paths, arch_file_name, q_str)

  return


def do_archive(host, paths, archive_name, query_string):

  global STRING_QUERY_MODE
  print(bcolors.WARNING + "connecting to host:" + bcolors.ENDC,host + ".")
  ssh_client = paramiko.SSHClient()
  ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  pass_in = ""
  sudo_pass_in = ""
  try_sudo_pass = False

  print("--------------------")
  print("using user:", os.environ['USER'])
  if os.getenv('PARAMIKO_PASS') is None:
    print("we will try your login password or your ssh key..")
    pass_in = getpass.getpass("provide pass for user|key:")
  else:
    pass_in = os.environ['PARAMIKO_PASS']
    sudo_pass_in = os.environ['PARAMIKO_SPASS']
  print("--------------------")

  try:
    try_sudo_pass = True
    ssh_client.connect(host, 22, os.environ['USER'], pass_in)
    try_sudo_pass = False
  except:
    print("Error with SSH connection")
    return

  if try_sudo_pass:
    print("Trying sudo pass...")
    ssh_client.connect(host, 22, os.environ['USER'], sudo_pass_in)

  if os.getenv('PARAMIKO_PASS') is None:
    sudo_pass_in = getpass.getpass("sudo password:")

  # begin processing remote files
  for p in paths:
    print bcolors.OKGREEN + "processing path:" + bcolors.ENDC ,p,"...")
    
    if STRING_QUERY_MODE:
      stdin, stdout, stderr = ssh_client.exec_command("sudo -S find " + p + " -type f -name \""+ query_string +"\" -print -exec tar -rf /tmp/" + archive_name + " {}  2>/dev/null \;", get_pty=True)
    else:
      stdin, stdout, stderr = ssh_client.exec_command("sudo -S find " + p + " -type f -name \"*.*\" -print -exec tar -rf /tmp/" + archive_name + " {}  2>/dev/null \;", get_pty=True)
    
    time.sleep(2)
    stdin.write(sudo_pass_in + "\n")
    stdin.flush()

  try:
    # begin transfering archive
    sftp_client = ssh_client.open_sftp()
    sftp_client.get("/tmp/"+archive_name, archive_name)

    bytes_tx = os.path.getsize(archive_name)
    if bytes_tx == 0:
        print(bcolors.WARNING + archive_name,"is zero bytes :( -- error?" + bcolors.ENDC)
        file = open("error.txt","a")
        file.write(host);
        file.close();
    else:
        print(bcolors.OKBLUE + "transfered",bytes_tx,"bytes" + bcolors.ENDC)

    # clean-up archive
    stdin, stdout, stderr = ssh_client.exec_command("sudo -S rm /tmp/" + archive_name)
    stdin.write(sudo_pass_in + "\n")
    stdin.flush()
  except:
      print(bcolors.FAIL + archive_name,"backup :( -- error?" + bcolors.ENDC)
      file = open("error.txt","a")
      file.write(host+"\n");
      file.close();

  return


if __name__ == "__main__":
    main(sys.argv[1:])



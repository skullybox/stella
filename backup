#! /usr/bin/python

# backup tool
# irfan

import sys
import os
import time
import getpass
import tarfile
import paramiko

def usage():
  """ print usage informaton """
  print "usage: host tag paths"

def main(argv):
  if not argv:
    usage()
    return
  if len(argv) < 3:
    usage()
    return

  begin_archive(argv)


def create_archive(arch_name, paths):

  print "using archive:", arch_name,"..."
  print "using paths:",":".join(paths),"..."

  tar = tarfile.open(arch_name, "w")

  return tar,paths


def begin_archive(argv):
  arch_file_name = argv[0] + "_" + argv[1] + "_" + str(time.time()) + ".tar.gz"
  tar, paths = create_archive(arch_file_name, argv[2:])

  do_archive(argv[0],tar,paths)

  return

def do_archive(host, tar, paths):

  print "connecting to host:",host + "."
  ssh_client = paramiko.SSHClient()
  ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

  print "--------------------"
  print "using user:", os.environ['USER']
  if os.getenv('PARAMIKO_PASS') is None:
    print "we will try your login password or your ssh key.."
    pass_in = getpass.getpass("provide pass for user|key:")
  else:
    pass_in = os.environ['PARAMIKO_PASS']
  print "--------------------"

  try:
    ssh_client.connect(host, 22, os.environ['USER'], pass_in)
  except:
    print "Error with SSH connection"
    return

  sudo_pass_in = getpass.getpass("sudo password:")


  # begin processing remote files
  for p in paths:
    print "processing path:",p,"..."
    stdin, stdout, stderr = ssh_client.exec_command("sudo find " + p + " -type f -name \"*.*\" -print", get_pty=True)
    stdin.write(sudo_pass_in + "\n")
    stdin.flush()

    file_list = stdout.read().splitlines()
    for fileItem in file_list:
        sftp_client = ssh_client.open_sftp()

        print "--",fileItem

        file_info = sftp_client.stat(fileItem)
        #print inf.st_mode
        #my_file = sftp_client.file(line, 'r')
        #if my_file.stat
        #print my_file.next()

  return


if __name__ == "__main__":
    main(sys.argv[1:])


